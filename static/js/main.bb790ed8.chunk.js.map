{"version":3,"sources":["search-box.js","filter.js","recipe.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","search","updateSearch","placeholder","type","className","value","onChange","SearchFilter","filterLogic","onClick","Recipe","title","calories","image","ingredients","totalTime","url","src","alt","map","ingredient","index","key","text","parseInt","href","target","rel","App","useState","recipes","setRecipes","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","classList","toggle","li","contains","innerText","recipe","label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb790ed8.chunk.js","sourcesContent":["import React from \"react\";\n\nconst SearchBox = ({ search, updateSearch, placeholder}) => (\n  <div>\n  <input\n  type=\"text\"\n  className=\"search-bar\"\n  value={search}\n  onChange={updateSearch}\n  placeholder={placeholder}\n  />\n  <button type=\"submit\" className=\"search-button\">\n<i className=\"fa fa-search\"></i> \n  </button>\n  </div>\n);\n\n\nexport default SearchBox;\n","import React from 'react';\n\nconst SearchFilter = ({ filterLogic }) => (\n  <div>\n    <ul className=\"filters\">\n      <li className=\"filter\" onClick={filterLogic}>\n        Falafel\n      </li>\n      <li className=\"filter\" onClick={filterLogic}>\n        Tofu Burgers\n      </li>\n      <li className=\"filter\" onClick={filterLogic}>\n        Vegan Nachos\n      </li>\n      <li className=\"filter\" onClick={filterLogic}>\n        Vegan Breakfast Sandwich\n      </li>\n    </ul>\n  </div>\n);\n\nexport default SearchFilter;\n","import React from 'react';\n\nconst Recipe = ({ title, calories, image, ingredients, totalTime, url }) => (\n  <div className=\"recipe\">\n\n  <div className=\"main\">\n  <img className=\"image\" src={image} alt=\"\" />\n  </div>\n\n  <div className=\"split\">\n  <div className=\"side\">\n  <h1 className=\"recipe_title\">{title}</h1>\n  <h2 className=\"ingredients-title\">Ingredients:</h2>\n\n  <ul className=\"ingredients\">\n  {ingredients.map((ingredient, index) => (\n         <li className=\"ingredient\" key={index}> {ingredient.text} </li>\n  ))}\n  </ul>\n\n\n  </div>\n\n  <div className=\"end\">\n  <p className=\"calories\">Calories: {parseInt(calories)} Kcal</p>\n  <p className=\"calories\">Cook Time: {parseInt(totalTime)} min</p>\n\n\n  <a href={url} target=\"_blank\" className=\"url\" rel=\"noopener noreferrer\">Cooking Instructions</a>\n  </div>\n  </div>\n\n  </div>\n\n\n);\n\nexport default Recipe;\n","import React, { useEffect, useState } from 'react';\nimport SearchBox from './search-box.js';\nimport SearchFilter from './filter.js';\nimport Recipe from './recipe.js';\nimport './App.css';\n\nconst App = () => {\n  const APP_ID = '0c5d304d';\n  const APP_KEY = '9da46f2d199c32b4f3b93b8b7dc9f244';\n  const veg = \"vegan\";\n\nconst [recipes, setRecipes] = useState([]);\nconst [search, setSearch] = useState(\"\");\nconst [query, setQuery] = useState(\"vegan\");\n\n\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\nconst getRecipes = async () => {\n  const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}&health=${veg}`);\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n};\n\nconst updateSearch = e => {\n  setSearch(e.target.value);\n  console.log(search);\n}\n\nconst getSearch = e => {\n  e.preventDefault();\n  setQuery(search);\n  setSearch('');\n}\n\nconst filterLogic = e => {\n  e.target.classList.toggle('active-filter');\n  const li = e.target;\n  if (li.classList.contains('active-filter')) {\n    setQuery(li.innerText);\n  } else {\n    setQuery('');\n  }\n};\n\n\nreturn (\n  <div className=\"App\">\n    <header className=\"header\">\n      <h1 className=\"title\">Vegan Easy</h1>\n      <form onSubmit={getSearch} className=\"search-form\">\n        <SearchBox updateSearch={updateSearch} placeholder=\"Search Recipe...\" />\n      </form>\n\n      <div className=\"search-filter\">\n        <SearchFilter filterLogic={filterLogic} />\n      </div>\n\n    </header>\n\n    <div className=\"recipes\">\n      {recipes.map((recipe, index) => (\n        <Recipe\n          key={recipe.recipe.label}\n          title={recipe.recipe.label}\n          calories={recipe.recipe.calories}\n          url={recipe.recipe.url}\n          totalTime={recipe.recipe.totalTime}\n          image={recipe.recipe.image}\n          ingredients={recipe.recipe.ingredients}\n        />\n      ))}\n    </div>\n<a className=\"mailto\" href=\"mailto:Johnmfairclough@gmail.com?subject=Hello%20John\">Johnmfairclough@gmail.com</a>\n</div>\n\n\n);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}